"use client";

import { useState } from "react";
import { VulnerabilityIssue } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { AlertTriangle, Code, ChevronDown, ChevronUp } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

interface VulnerabilityItemProps {
  issue: VulnerabilityIssue;
}

export function VulnerabilityItem({ issue }: VulnerabilityItemProps) {
  const [isOpen, setIsOpen] = useState(false);
  
  const severityColors = {
    Critical: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    High: "bg-orange-500 text-white hover:bg-orange-600",
    Medium: "bg-yellow-500 text-white hover:bg-yellow-600",
    Low: "bg-blue-500 text-white hover:bg-blue-600",
    Info: "bg-gray-500 text-white hover:bg-gray-600"
  };
  
  return (
    <Card className="overflow-hidden">
      <CardContent className="p-0">
        <div className="p-4">
          <div className="flex items-start justify-between">
            <div className="flex items-start gap-3">
              <div className="mt-1">
                <AlertTriangle className={`h-5 w-5 ${
                  issue.severity === 'Critical' ? 'text-destructive' :
                  issue.severity === 'High' ? 'text-orange-500' :
                  issue.severity === 'Medium' ? 'text-yellow-500' :
                  issue.severity === 'Low' ? 'text-blue-500' : 'text-gray-500'
                }`} />
              </div>
              <div>
                <h3 className="font-medium">{issue.title}</h3>
                <p className="text-sm text-muted-foreground mt-1">{issue.description}</p>
                <div className="flex items-center gap-2 mt-2">
                  <Badge className={severityColors[issue.severity as keyof typeof severityColors]}>
                    {issue.severity}
                  </Badge>
                  <Badge variant="outline" className="text-xs">
                    Line {issue.location.start.line}-{issue.location.end.line}
                  </Badge>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="sm" className="w-full flex justify-between rounded-none border-t">
              <span className="flex items-center">
                <Code className="h-4 w-4 mr-2" />
                View Code Snippet
              </span>
              {isOpen ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
            </Button>
          </CollapsibleTrigger>
          <CollapsibleContent>
            <div className="bg-muted p-4">
              <pre className="font-mono text-xs sm:text-sm overflow-auto">
                <code>{issue.codeSnippet}</code>
              </pre>
              
              {issue.suggestedFix && (
                <div className="mt-4 pt-4 border-t border-border">
                  <h4 className="text-sm font-medium mb-2">Suggested Fix:</h4>
                  <pre className="font-mono text-xs sm:text-sm overflow-auto bg-background p-2 rounded">
                    <code>{issue.suggestedFix}</code>
                  </pre>
                </div>
              )}
            </div>
          </CollapsibleContent>
        </Collapsible>
      </CardContent>
    </Card>
  );
}